{"mappings":"YAIA,IAAMA,EAAOC,SAASC,cAAc,QACrBD,SAASC,cAAc,UAEtCF,EAAKG,iBAAiB,UAItB,SAAkBC,GAChB,IAAIC,EAAU,EACRC,EAAcC,OAAOP,EAAK,GAAGQ,OAE/BC,EAAkB,EAClBC,EAAaH,OAAOP,EAAK,GAAGQ,OAC1BG,EAAeJ,OAAOP,EAAK,GAAGQ,OAEpCJ,EAAIQ,iBAEJ,IAAMC,EAAaC,aAAY,WAC7B,GAAIT,IAAYC,EAAhB,CAIA,IAwBmBS,EAAUC,EAxBvBC,EAAcP,GAAcC,EAC5BO,EAAmBT,GAAmB,GAuBzBM,EArBLG,EAqBeF,EArBEC,EAsBjB,IAAIE,SAAQ,SAACC,EAASC,GACpC,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEL,WAAUC,UAEpBK,EAAO,CAAEN,WAAUC,S,GAEpBA,E,KA9BAU,MAAK,SAAAC,G,IAAGZ,EAAQY,EAARZ,SAAUC,EAAKW,EAALX,MACjBY,SAASC,OAAOC,QACd,uBAAwCC,OAAfhB,EAAS,QAAYgB,OAANf,EAAM,MAC5C,CACAgB,QAAS,K,IAIdC,OAAM,SAAAN,G,IAAGZ,EAAQY,EAARZ,SAAUC,EAAKW,EAALX,MAClBY,SAASC,OAAOK,QACd,sBAAqCH,OAAfhB,EAAS,QAAYgB,OAANf,EAAM,MAC3C,CACEgB,QAAS,K,IAIjB3B,GAAW,C,MAvBT8B,cAActB,E,GAwBfF,E","sources":["src/js/03-promises.js"],"sourcesContent":["// import Notiflix from \"notiflix\";\n\n// Get accesses and add listeners\n\nconst form = document.querySelector('form');\nconst button = document.querySelector('button');\n\nform.addEventListener('submit', interval);\n\n// The function make interval for createPromise\n\nfunction interval(evt) {\n  let counter = 0;\n  const MAX_COUNTER = Number(form[2].value);\n\n  let positionCounter = 0;\n  let firstDelay = Number(form[0].value);\n  const usrDelayStep = Number(form[1].value);\n\n  evt.preventDefault();\n\n  const intervalID = setInterval(() => {\n    if (counter === MAX_COUNTER) {\n      clearInterval(intervalID);\n      return;\n    }\n    const totalDelay = (firstDelay += usrDelayStep);\n    const positionPromise = (positionCounter += 1);\n\n    createPromise(positionPromise, totalDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`,\n          {\n            timeout: 8000,\n          }\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`,\n          {\n            timeout: 8000,\n          }\n        );\n      });\n    counter += 1;\n  }, usrDelayStep);\n}\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n  return promise;\n}\n"],"names":["$ce04d3a99e08e73b$var$form","document","querySelector","addEventListener","evt","counter","MAX_COUNTER","Number","value","positionCounter","firstDelay","usrDelayStep","preventDefault","intervalID","setInterval","position","delay","totalDelay","positionPromise","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","param","Notiflix","Notify","success","concat","timeout","catch","failure","clearInterval"],"version":3,"file":"03-promises.c6f6fa15.js.map"}